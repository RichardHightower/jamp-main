4/23/2012
Some major refactoring to force code to use Factory instead of creating radmon helper classes (so someone can replace
said classes one day if needed). Interface clean up. 

WebSocket support for client side now supports subprotocol handling. (Sec-WebSocket-Protocol).
I got a swing app talking to the Caucho Resin WebSocket example that I wrote.
I'd like to get same app talking to Jetty (low priority but something I would like to try).

Lots of cleanup. 

The early routing seems to work, more work needs to be done but getting closer.
Want to intergate HTTP/REST forward, Async (Blocking Queues) and STOMP then 
done with routing for RI (for now). 

Need to check in the Servlet/HTTP work that I have done so far. (Need seperate projects for this
as they depend on Java EE not just Java).

Need to start thinking about what a JavaScript client for JAMP would look like. 
Given the state of WebSockets, I think said library would need an easy fallback to long poll, ajax.

After the above is done, then I am going to port it all to Python.





4/14/2012
Took a break. Then a detour into adding WebSockets support. Some websockets support added.
JAMP can now send/recieve websockets.

4/12/2012
Gradual progress on router, RPC, message correlation. Getting closer, but not close enough 
to really start talking about yet.

4/10/2012

This project is not ready to be really looked at yet.
At one point, SEND was working over WebSocket, STOMP and REST/HTTP.

We (mostly me at this point) are in the process of adding QUERY, REPLY, ERROR, and ERROR-QUERY.
It is broken at this point (unit tests work and some of the examples work).

Probably by the end of this week, all of the examples should be working again.
I am working on this project about 20% of my time.

I am going to write up a roadmap. 

To read more about JAMP go here:
http://json-amp.github.com/

Once I get all of the RPC style communication working again, I am going to create a release branch,
and call this version 0.01. Then I am going to write up some articles to try to get other people to 
work on it with me.

Then I am going to start working on the JavaScript client pieces for a while.

If you really want to know what JAMP is go here:
https://github.com/json-amp/json-amp.github.com/wiki/Intro-to-JAMP


If you are wondering why the code looks a bit odd:
https://github.com/json-amp/json-amp.github.com/wiki/Coding-Style

If you would like to read the IETF draft (specification):
http://hessian.caucho.com/jamp/draft-ferg-jamp-v0.html

Most of the ideas for JAMP came from ideas in Hessian 2.0 and works Scott Ferguson has done on BAM and WebSockets.

The ideas for JAMP are from Scott Ferguson.

--Rick Hightower